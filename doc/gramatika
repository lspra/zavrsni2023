<program> -> <program_parts> <main_function>
<program_parts> -> <class_decl> <program_parts> | <function> <program_parts> | $
<class_decl> -> class var <base_classes> {<class_body>}
<base_classes> -> (<base_list>) | $
<base_list> -> <base_list>, var | var
<class_body> -> <visibility_block> <class_body> | <visibility_block>
<visibility_block> -> <visibility_specifier> <program_parts>
<visibility_specifier> -> public | private
<function> -> var (<function_arguments>) <return_type> <block_commands>
<main_function> -> main (<function_arguments>) <block_commands>
<return_type> -> =data_type | $
<function_arguments> -> <argument>, <function_arguments> | <argument>
<argument> -> <decl_command>
<block_commands> -> {<commands>} | <command>;
<commands> -> <command>; <commands> | $
<command> -> <decl_command> | <if_commmand> | <for_command> | <while_command> | <input_command> | <print_command> | <func_call> | <set_command> | <return_command> | <loop_command> | <method_call>
<method_call> -> var.var()
<loop_command> -> break | continue
<return_command> -> return <exp> | return
<decl_command> -> var = <data_type>
<set_command> -> <Lvalue> = <exp> | <Lvalue> = <func_call> | $
<if_command> -> if(<exp>) <block_commands> | if(<exp>) <block_commands> else <block_commands>
<for_command> -> for(<set_command>; <exp>; <set_command>) <block_commands>
<while_command> -> while(<exp>) <block_commands>
<input_command> -> input(<Lvalue>)
<print_command> -> print(<exp>)
<func_call> -> var(<arguments>)
<arguments> -> <argument_list> | $
<argument_list> -> var, <argument_list> | var
<exp> -> <K> or <K> | <K> xor <K> | <K>
<K> -> <J> and <J> | <J>
<J> -> not <I> | <I>
<I> -> <H> == <H> | <H> != <H>| <H> < <H> | <H> <= <H> | <H> > <H> | <H> >= <H> | <H>
<H> -> var operator_modify | operator_modify var | 
    var operator_modify (<exp>) | (<exp>) operator_modify var | 
    var operator_modify const | const operator_modify var |
    var = <exp> | <G>
<G> -> <F> + <F> | <F> - <F> | <F>
<F> -> <E> * <E> | <E> / <E> | <E> % <E> | <E>
<E> -> <D> '|' <D> | <D> ^ <D> | <D>
<D> -> <C> & <C> | <C>
<C> -> <B> << <B> | <B> >> <B> | <B>
<B> -> <A> | +<A> | -<A> | ~<A>
<A> -> <Lvalue> | (<exp>) | const
<Lvalue> -> var | var[<exp>]